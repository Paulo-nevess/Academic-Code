public class Lista3 {

	public static void main(String[] args) {
		MyIO.setCharset("ISO-8859-1");
		
		//vetores de objeto
		Estudante[]estudantes = new Estudante[70];
		OutrosFuncionarios[]outrosFuncionarios = new OutrosFuncionarios[60];
		Professor[]professor = new Professor[60];
		//Contadores para as classes
		int countEstudante = 0;
		int countOutrosFuncionarios = 0;
		int countProfessor = 0;
		
		String linha = MyIO.readLine();
		String[]dados;
		while(!linha.equals("FIM")) {
			dados = linha.split(",");
			if(dados[0].equals("Estudante")) {
					
				estudantes[countEstudante] = new Estudante(dados);
				countEstudante++;
			}else if(dados[0].equals("Funcionario")) {
				if(dados[1].equals("Professor")) {
					professor[countProfessor] = new Professor(dados);
					countProfessor++;
				}else if(dados[1].equals("OutrosFuncionarios")) {
					outrosFuncionarios[countOutrosFuncionarios] = new OutrosFuncionarios(dados);
					countOutrosFuncionarios++;
				}
			}
			linha = MyIO.readLine();
		}
		for(int i = 0; i < countEstudante; i++) {
			estudantes[i].imprime();
		}
		for(int i = 0; i < countOutrosFuncionarios; i++) {
			outrosFuncionarios[i].imprime();
		}
		for(int i = 0; i < countProfessor; i++) {
			professor[i].imprimir();
		}
	}
}
//===============================================================================
abstract class Pessoa {
	
	//Atributos
	protected String nome;
	protected long cpf;
	private int idade;
	
	//Construtor
	public Pessoa(String nome, long cpf, int idade) {
		this.nome = nome;
		this.cpf = cpf;
		this.idade = idade;
	}
	
	//Métodos
	public abstract long getCpf();//***Implementar esta função em uma subclasse** 

	public abstract void setCpf(long cpf);//***Implementar esta função em uma subclasse**

	
	public void setNome(String nome){// metodo Modificador
		this.nome = nome;
	}
	
	public String getNome() {//método de acesso
		
		return nome;
	}
	
	public void setIdade(int idade) {// metodo Modificador
		this.idade = idade;
	}
	
	public int getIdade() {//método de acesso
		
		return idade;
	}
	
}
//===============================================================================
abstract class Funcionario extends Pessoa {
	
	//Atributos
	protected String vinculo;//Este atributo serve para separar em subclasses profesores e outros funcionarios 
	protected int horasSemanais;
	
	//Construtor
	public Funcionario (String vinculo, String nome, long cpf, int idade, int horasSemanais){
		super(nome, cpf, idade);
		this.vinculo = vinculo;
		this.horasSemanais = horasSemanais;
	}
	
	//acessores e modificadores
	public void setVinculo(String vinculo) {
		this.vinculo = vinculo;
	}
	
	public String getVinculo() {
		return vinculo;
	}
	
	//metodos abstratos acessores e modificadores
	public abstract int getHorasSemanais();
	
	public abstract void setHorasSemanais(int horasSemanais);
	
}
//===============================================================================
class Estudante extends Pessoa{
	
	//Atributos
	String vinculo;
	String status;//Amazena se o aluno é veterano ou calouro
	int matricula;
	String[] disciplinas;//armazena as disciplinas que o aluno esta matriculado.
	int totalDeDisciplinas;//contabiliza o total de discip que o aluno esta matriculado.
	
	//Construtor
	//public Estudante(String vinculo, String nome, long cpf, int idade, String status, int matricula, String[] disciplinas, int totalDeDisciplinas) {
	public Estudante(String[]dados) {
		super (dados[1], Long.parseLong(dados[2]), Integer.parseInt(dados[3]));
		this.vinculo = dados[0];
		this.status = dados[4];
		this.matricula = Integer.parseInt(dados[5]);
		this.totalDeDisciplinas = 0;
		disciplinas = new String[dados.length-6];
		for(int i = 6, j = 0; i < dados.length; i ++, j++) {
			disciplinas[j] = dados[i];
			totalDeDisciplinas++;
		}
	}
	
	//métodos
	public String getVinculo() {
		return vinculo;
	}
	
	public void setVinculo(String vinculo) {
		this.vinculo = vinculo;
	}
	
	public String getStatus() {
		return status;
	}
	
	public void setStatus(String status) {
		this.status = status;
	}
	
	public int getMatricula() {
		return matricula;
	}
	
	public void setMatricula(int matricula) {
		this.matricula = matricula;
	}
	
	public String[] getDisciplinas() {
		return disciplinas;
	}
	
	public void setDisciplinas(String[] disciplinas) {
		this.disciplinas = disciplinas;
		this.totalDeDisciplinas = disciplinas.length;
	}
	
	
	public long getCpf() {
		return cpf;
	}
	
	
	public void setCpf(long cpf) {
		this.cpf = cpf;
	}
	
	public void imprime() {
		System.out.print(getNome() + ", " +
							getCpf() + ", " +
							getIdade() + ", " +
							getMatricula());
		for(int i = 0; i < disciplinas.length; i++) {
			System.out.print(", " + disciplinas[i]);
		}
		System.out.println();
	}
}

//===============================================================================
class OutrosFuncionarios extends Funcionario{
	//Atribugtos
	private String funcao;
	
	//Contrutor
	//public OutrosFuncionarios(String vinculo, String nome, long cpf, int idade, int horasSemanais, String funcao) {
	public OutrosFuncionarios(String[]dados) {
		super(dados[1], dados[2], Long.parseLong(dados[3]), Integer.parseInt(dados[4]), Integer.parseInt(dados[dados.length-1]));
		this.funcao = dados[5];
	}
	//Metodos
	public void setCpf(long cpf) {
		this.cpf = cpf;
	}
	
	public long getCpf() {
		return cpf;
	}
	
	public void setHorasSemanais(int horasSemanais) {
		this.horasSemanais = horasSemanais;
	}
	
	public int getHorasSemanais() {
		return horasSemanais;
	}
	
	public void setFuncao(String funcao) {
		this.funcao = funcao;
	}
	
	public String getFuncao() {
		return funcao;
	}
	
	//public void imprime(String nome, long cpf, int idade, int horasSemanais) {
	public void imprime() {
		System.out.print(getNome() + ", " +
							getCpf() + ", " +
							getIdade() + ", " +
							getHorasSemanais()+"\n");
		
	}

}

class Professor extends Funcionario{
	
	//atributos
	String[] disciplinas;
	int totalDeDisciplinas;
	
	//construtor
//	public Professor(String vinculo, String nome, long cpf, int idade, int horasSemanais, String[] disciplinas, int totalDeDisciplinas) {
	//Funcionario,Professor,Jos  Assun  o de Delgado,88443157238,56,Qu mica,Qu mica Org nica,Qu mica Inorg nica,12

	public Professor(String[]dados) {
		super(dados[1], dados[2], Long.parseLong(dados[3]),Integer.parseInt(dados[4]), Integer.parseInt(dados[dados.length-1]));
		this.totalDeDisciplinas = 0;
		disciplinas = new String[dados.length-6];
		for(int i = 5, j = 0; i < dados.length -1; i++, j++) {
			disciplinas[j] = dados[i];
			totalDeDisciplinas++;
		}		
	}
	
	//metodos
	public int getHorasSemanais() {
		return horasSemanais;
	}
	
	public void setHorasSemanais(int horasSemanais) {
		this.horasSemanais = horasSemanais;
	}

	public long getCpf() {
		return cpf;
	}

	public void setCpf(long cpf) {
		this.cpf = cpf;
	}
	
	public String[] getDisciplinas() {
		return disciplinas;
	}
	
	public void setDisciplinas(String[] disciplinas) {
		this.disciplinas = disciplinas;
	}
	
	//Professor -> a partir da segunda posição: vínculo, nome, cpf, idade, lista de disciplinas lecionadas, horas semanais
	//public void imprimir(String nome, long cpf, int idade, int horasSemanais, String[] disciplinas) {
	public void imprimir() {
		System.out.print(getNome() + ", " +
							getCpf() + ", " +
							getIdade() + ", " +
							getHorasSemanais());
		for(int i = 0; i < disciplinas.length; i++) {
			System.out.print(", " + disciplinas[i]);
		}
		System.out.println();
		//MyIO.println(", " + getHorasSemanais());
	}
}
